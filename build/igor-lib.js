(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  module.exports = {
    helpers: require('./modules/helpers.js'),
    numbers: require('./modules/numbers.js'),
    date: require('./modules/date.js')
  };

}).call(this);

},{"./modules/date.js":2,"./modules/helpers.js":3,"./modules/numbers.js":4}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  var date, h;

  h = require('./helpers.js');

  date = new Date();

  module.exports = {
    rusDate: function(day, month, year) {
      var m;
      if (day === "today" || day === "after" || day === "before" || !h.isset(day)) {
        if (day === "after") {
          if (year === "days") {
            date.setDate(date.getDate() + month);
          }
          if (year === "months") {
            date.setDate(date.getMonth() + month);
          }
          if (year === "years") {
            date.setDate(date.getFullYear() + month);
          }
        }
        if (day === "before") {
          if (year === "days") {
            date.setDate(date.getDate() - month);
          }
          if (year === "months") {
            date.setDate(date.getMonth() - month);
          }
          if (year === "years") {
            date.setDate(date.getFullYear() - month);
          }
        }
        day = ((date.getDate() + "").length === 1 ? "0" : "") + date.getDate();
        m = date.getMonth() + 1;
        month = ((m + "").length === 1 ? "0" : "") + m;
        year = date.getFullYear();
      }
      return day + "." + month + "." + year;
    },
    updateClock: function(clock) {
      var set_time;
      return (set_time = function() {
        var ct, interval, m, s;
        ct = new Date();
        h = ct.getHours();
        m = ct.getMinutes();
        s = ct.getSeconds();
        if (h < 10) {
          h = "0" + h;
        }
        if (m < 10) {
          m = "0" + m;
        }
        clock.text(h + ":" + m);
        interval = 60 - s;
        return setTimeout(set_time, interval * 1000);
      })();
    }
  };

}).call(this);

},{"./helpers.js":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  module.exports = {
    isset: function(variable) {
      return typeof variable !== "undefined" && variable !== null;
    }
  };

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.12.2
(function() {
  module.exports = {
    delim_num: function(num) {
      var cost, i, j, len, n;
      cost = "";
      num = num + "";
      for (i = j = 0, len = num.length; j < len; i = ++j) {
        n = num[i];
        if ((i + 1) % 3 === 0 && i !== (num.length - 1)) {
          cost = num[num.length - 1 - i] + cost;
          cost = "&nbsp" + cost;
        } else {
          cost = num[num.length - 1 - i] + cost;
        }
      }
      return cost;
    },
    pretty_tel: function(num) {
      return num.replace(/^(\d{3})(\d{3})(\d{2})(\d{2})$/ig, '+7&nbsp($1)&nbsp$2&#8209;$3&#8209;$4');
    },
    to_literal: function(number) {
      var arr_numbers, count, decimals_parser, num_digit, num_parser, number_arr, number_decimals, number_length, number_parser, p, string;
      arr_numbers = new Array;
      number_parser = function(num, desc) {
        var first_num, last_2_nums, last_num, num_hundred, second_num, string;
        string = '';
        num_hundred = '';
        if (num.length === 3) {
          num_hundred = num.substr(0, 1);
          num = num.substr(1, 3);
          string = arr_numbers[3][num_hundred] + ' ';
        }
        if (num < 20) {
          string += arr_numbers[1][parseFloat(num)] + ' ';
        } else {
          first_num = num.substr(0, 1);
          second_num = num.substr(1, 2);
          string += arr_numbers[2][first_num] + ' ' + arr_numbers[1][second_num] + ' ';
        }
        switch (desc) {
          case 0:
            last_num = parseFloat(num.substr(-1));
            last_2_nums = parseFloat(num.substr(-2));
            if (last_2_nums > 10 && last_2_nums < 21) {
              string += 'рублей';
            } else if (last_num === 1) {
              string += 'рубль';
            } else if (last_num > 1 && last_num < 5) {
              string += 'рубля';
            } else {
              string += 'рублей';
            }
            break;
          case 1:
            last_num = parseFloat(num.substr(-1));
            last_2_nums = parseFloat(num.substr(-2));
            if (last_2_nums > 10 && last_2_nums < 21) {
              string += 'тысяч ';
            } else if (last_num === 1) {
              string += 'тысяча ';
            } else if (last_num > 1 && last_num < 5) {
              string += 'тысячи ';
            } else {
              string += 'тысяч ';
            }
            string = string.replace('один ', 'одна ');
            string = string.replace('два ', 'две ');
            break;
          case 2:
            last_num = parseFloat(num.substr(-1));
            last_2_nums = parseFloat(num.substr(-2));
            if (last_2_nums > 10 && last_2_nums < 21) {
              string += 'миллионов ';
            } else if (last_num === 1) {
              string += 'миллион ';
            } else if (last_num > 1 && last_num < 5) {
              string += 'миллиона ';
            } else {
              string += 'миллионов ';
            }
            break;
          case 3:
            last_num = parseFloat(num.substr(-1));
            last_2_nums = parseFloat(num.substr(-2));
            if (last_2_nums > 10 && last_2_nums < 21) {
              string += 'миллиардов ';
            } else if (last_num === 1) {
              string += 'миллиард ';
            } else if (last_num > 1 && last_num < 5) {
              string += 'миллиарда ';
            } else {
              string += 'миллиардов ';
            }
        }
        string = string.replace('  ', ' ');
        return string;
      };
      decimals_parser = function(num) {
        var first_num, second_num, string;
        first_num = num.substr(0, 1);
        second_num = parseFloat(num.substr(1, 2));
        string = ' ' + first_num + second_num;
        if (second_num === 1) {
          string += '&nbsp;копейка';
        } else if (second_num > 1 && second_num < 5) {
          string += '&nbsp;копейки';
        } else {
          string += '&nbsp;копеек';
        }
        return string;
      };
      arr_numbers[1] = new Array('', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать');
      arr_numbers[2] = new Array('', '', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто');
      arr_numbers[3] = new Array('', 'сто', 'двести', 'триста', 'четыреста', 'пятьсот', 'шестьсот', 'семьсот', 'восемьсот', 'девятьсот');
      if (!number || number === 0) {
        return false;
      }
      if (typeof number !== 'number') {
        number = number.replace(',', '.');
        number = parseFloat(number);
        if (isNaN(number)) {
          return false;
        }
      }
      number = number.toFixed(2);
      if (number.indexOf('.') !== -1) {
        number_arr = number.split('.');
        number = number_arr[0];
        number_decimals = number_arr[1];
      }
      number_length = number.length;
      string = '';
      num_parser = '';
      count = 0;
      p = number_length - 1;
      while (p >= 0) {
        num_digit = number.substr(p, 1);
        num_parser = num_digit + num_parser;
        if ((num_parser.length === 3 || p === 0) && !isNaN(parseFloat(num_parser))) {
          string = number_parser(num_parser, count) + string;
          num_parser = '';
          count++;
        }
        p--;
      }
      if (number_decimals) {
        string += decimals_parser(number_decimals);
      }
      return string;
    }
  };

}).call(this);

},{}]},{},[1]);
